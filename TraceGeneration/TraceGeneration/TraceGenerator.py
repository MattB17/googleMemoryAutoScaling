"""The `TraceGenerator` class is used to generate data traces for analysis.
It has several methods for generating different classes of traces
corresponding to different usage patterns.

"""
import numpy as np


class TraceGenerator:
    """Generates data trace for analysis.

    Parameters
    ----------
    trace_length: int
        An integer representing the number of time points for the generated
        traces.

    Attributes
    ----------
    _trace_length: int
        The number of time points for generated traces.

    """
    def __init__(self, trace_length):
        self._trace_length = trace_length

    def generate_constant_traces(self, trace_count, mu, sigma, amp):
        """Generates `trace_count` constant traces.

        A constant trace is generated by taking a random constant and
        replicating it for the length of the trace. Then for each time point,
        a small bit of noise is added from a `N(0, amp^2)` random variable.
        The random constant is sampled from a `N(mu, sigma^2)` random
        variable.

        Parameters
        ----------
        trace_count: int
            A count of the number of traces to generate
        mu: float
            Represents the average of all the generated traces. This is the
            average of the random constants used to generate the traces.
        sigma: float
            Represents the standard deviation across all of the traces. This
            is the standard deviation of the random constants used to generate
            the traces.
        amp: float
            This is the standard deviation of each trace.

        Returns
        -------
        list
            A list of numpy arrays representing constant traces. The list has
            `trace_count` traces.

        """
        constants = np.random.normal(mu, sigma**2, trace_count)
        amp_factor = np.random.normal(0, 1, trace_count)
        traces = [None for _ in range(trace_count)]
        for idx in range(trace_count):
            trace_var = (amp ** 2) * abs(amp_factor[idx])
            traces[idx] = constants[idx] + np.random.normal(
                0, trace_var, self._trace_length)
        return traces
